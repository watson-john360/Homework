<lesson>
    <title name="" id="">Pros and Cons of Trunk Based Development</title>
    <content name="trunk-pros" id="">Trunk Based Development (using Phabricator's workflow) puts code in a review state before it is merged; it cannot be merged until it has been reviewed. The pro is that the need for reversions is minimized as code is reviewed/revised as it is being developed, helping keep the trunk clean and allowing for greater control over the merges to the trunk. Issues are kept non-blocking when they are caught and fixed in the review stage. Because the commits are pushed directly to the trunk, and are pushed rapidly and continually, a large emphasis is placed on quick, consistent, and stable code review practices (such as unit and acceptence testing). 
</content>
    <content name="trunk-cons" id="">One potential downside to this method is that commits could be kept in a review limbo, and the temptation to avoid quick commits goes up (out of fear that they may be rejected). This can be mitigated to a degree by a solid, reliable testing/review process. Another factor to consider is where the code is landing after the merge. If the unit and acceptance tests are not robust enough, build-breaking code be merged into the trunk. This risk can be minimized by hardening the tests (Test Driven Development practices) and performing routine audits on the trunk. </content>
</lesson>